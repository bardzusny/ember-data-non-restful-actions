import Ember from 'ember';
import NonRestActionMixin from 'ember-data-non-restful-actions/mixins/non-rest-action';
import { module, test } from 'qunit';
import sinon from 'sinon';

const { RSVP } = Ember;

const NonRestActionObject = Ember.Object.extend(NonRestActionMixin);

module('Unit | Mixin | non rest action');

test('getActionUrl builds request URL', function(assert) {
  const subject = NonRestActionObject.create({
    id: '01189998819991197253',
    constructor: {
      modelName: 'test model',
    },
  });
  const adapterMock = {
    buildURL: sinon.stub().returns('some_url'),
  };
  const url = subject.getActionUrl('some_action', adapterMock);

  assert.deepEqual(
    adapterMock.buildURL.firstCall.args,
    ['test model', '01189998819991197253'],
    'calls buildURL adapter method with proper arguments'
  );
  assert.equal(
    url,
    'some_url/some_action',
    'returns URL generated by buildURL adapter method'
  );
});

test('nonRestAction calls adapter .ajax() method', function(assert) {
  const adapterMock = {
    ajax: sinon.stub().returns(RSVP.Promise.resolve('response body')),
  };
  const subject = NonRestActionObject.create({
    id: '1189998819991197253',
    constructor: {
      modelName: 'test model',
    },
    getActionUrl: sinon.stub().returns('some_url'),
    store: {
      adapterFor: sinon.stub().returns(adapterMock),
    },
  });

  subject.nonRestAction('some_action', 'POST', { phoneNo: '0118 999 881 999 119 7253' })
    .then((response) => {
      assert.equal(
        response,
        'response body',
        'returns promise resolving with server response body'
      );
    });
  assert.ok(
    adapterMock.ajax.calledOnce,
    'calls adapter .ajax() method once'
  );
  assert.deepEqual(
    adapterMock.ajax.firstCall.args,
    ['some_url', 'POST', { data: { phoneNo: '0118 999 881 999 119 7253' } }],
    'calls adapter .ajax() method with correct arguments'
  );
});
